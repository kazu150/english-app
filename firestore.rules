rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null
    }

    function isUserAuthenticated(uid){
      return isAuthenticated() && request.auth.uid == uid;
    }

    function incomingData() {
      return request.resource.data;
    }

    match /users/{uid} {
      allow create, update: if isUserAuthenticated(uid)
        && incomingData().size() <= 4
        && incomingData().createdAt <= request.time
        && incomingData().updatedAt == request.time
        && ((!('initialTime' in incomingData())) || ((incomingData().initialTime is number) && (incomingData().initialTime >= 0) && (incomingData().initialTime < 1000000)))
        && ((!('englishService' in incomingData())) || (incomingData().englishService == null) || (incomingData().englishService is path))
      allow read: if isUserAuthenticated(uid)
    }

    match /users/{uid}/studyLog/{id} {
      allow update, create: if isUserAuthenticated(uid)
        && incomingData().size() == 5
        && incomingData().date == request.time
        && incomingData().nationality is path
        && incomingData().count is number && (incomingData().count >= 1) && (incomingData().count < 10)
        && incomingData().englishService is path
        && incomingData().time is number && (incomingData().time >= 1) && (incomingData().time < 250)
      allow read: if isUserAuthenticated(uid);
    }

    match /publicProfiles/{uid} {
      allow create, update: if isUserAuthenticated(uid);
      allow read: if isAuthenticated();
    }

    match /englishServices/{englishServiceId} {
      allow read: if isAuthenticated();
    }

  }
}